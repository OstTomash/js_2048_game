{"version":3,"sources":["scripts/main.js"],"names":["gameField","document","querySelector","button","startMessage","winnerMessage","looseMessage","score","mainSectionClass","ROWS","COLUMNS","WIN_NUM","board","Array","from","length","fill","gameOver","winGame","filterFromZero","arr","filter","item","isEmptyField","table","row","col","canMoveRight","i","j","canMoveLeft","canMoveUp","canMoveDown","endGame","includes","checkEndGame","classList","remove","notifyWinner","querySelectorAll","forEach","cell","innerText","move","newRow","push","moveVerticaly","direction","c","column","reverse","updateSections","moveHorithontaly","r","createBoard","section","createElement","add","id","append","className","startsWith","getElementById","addNumber","amountNumbers","Math","floor","random","num","addEventListener","contains","firstChild","removeChild","e","preventDefault","key"],"mappings":"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","file":"main.d37ae92f.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\n// DOM Elements\nconst gameField = document.querySelector('.game-field');\nconst button = document.querySelector('.button');\nconst startMessage = document.querySelector('.message--start');\nconst winnerMessage = document.querySelector('.message--win');\nconst looseMessage = document.querySelector('.message--lose');\nconst score = document.querySelector('.game-score');\n\n// Variables\nconst mainSectionClass = 'field-cell';\nconst ROWS = 4;\nconst COLUMNS = 4;\nconst WIN_NUM = 2048;\nlet board = Array.from({ length: ROWS }, () => Array(COLUMNS).fill(0));\nlet gameOver = false;\nlet winGame = false;\n\n// functions helpers\nconst filterFromZero = arr => arr.filter(item => item !== 0);\n\nconst isEmptyField = table => {\n  for (let row = 0; row < ROWS; row++) {\n    for (let col = 0; col < COLUMNS; col++) {\n      if (table[row][col] !== 0) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n};\n\n// Move checks\nconst canMoveRight = () => {\n  for (let i = 0; i < board.length; i++) {\n    for (let j = 0; j < board[i].length - 1; j++) {\n      if (\n        board[i][j] !== 0\n        && (board[i][j + 1] === 0\n        || board[i][j] === board[i][j + 1])\n      ) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n};\n\nconst canMoveLeft = () => {\n  for (let i = 0; i < board.length; i++) {\n    for (let j = 1; j < board[i].length; j++) {\n      if (\n        board[i][j] !== 0\n        && (board[i][j - 1] === 0\n        || board[i][j] === board[i][j - 1])\n      ) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n};\n\nconst canMoveUp = () => {\n  for (let i = 1; i < board.length; i++) {\n    for (let j = 0; j < board[i].length; j++) {\n      if (\n        board[i][j] !== 0\n        && (board[i - 1][j] === 0\n        || board[i][j] === board[i - 1][j])\n      ) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n};\n\nconst canMoveDown = () => {\n  for (let i = 0; i < board.length - 1; i++) {\n    for (let j = 0; j < board[i].length; j++) {\n      if (\n        board[i][j] !== 0\n        && (board[i + 1][j] === 0\n          || board[i][j] === board[i + 1][j])\n      ) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n};\n\n// looser/winner checks\nconst endGame = () => {\n  if (isEmptyField(board)) {\n    return false;\n  }\n\n  const haveMoves = [canMoveRight(), canMoveLeft(), canMoveDown(), canMoveUp()];\n\n  return !haveMoves.includes(true);\n};\n\nconst checkEndGame = () => {\n  if (endGame()) {\n    gameOver = true;\n\n    looseMessage.classList.remove('message--hidden');\n  }\n};\n\nconst notifyWinner = () => {\n  const cells = gameField.querySelectorAll(`.${mainSectionClass}`);\n\n  cells.forEach(cell => {\n    if (+cell.innerText === WIN_NUM) {\n      winGame = true;\n    }\n  });\n\n  if (winGame) {\n    winnerMessage.classList.remove('message--hidden');\n  }\n};\n\n// Move funtions\nconst move = row => {\n  let newRow = filterFromZero(row);\n\n  for (let i = 0; i < newRow.length; i++) {\n    if (newRow[i] === newRow[i + 1]) {\n      newRow[i] = newRow[i] * 2;\n      newRow[i + 1] = 0;\n      score.innerText = +score.innerText + newRow[i];\n    }\n\n    newRow = filterFromZero(newRow);\n  }\n\n  while (newRow.length < COLUMNS) {\n    newRow.push(0);\n  }\n\n  return newRow;\n};\n\nconst moveVerticaly = direction => {\n  for (let c = 0; c < COLUMNS; c++) {\n    let column = Array.from(board, row => row[c]);\n\n    switch (direction) {\n      case 'up':\n        column = move(column);\n\n        for (let row = 0; row < ROWS; row++) {\n          board[row][c] = column[row];\n        }\n\n        break;\n\n      case 'down':\n        column.reverse();\n        column = move(column);\n        column.reverse();\n\n        for (let row = 0; row < ROWS; row++) {\n          board[row][c] = column[row];\n        }\n\n        break;\n    }\n  }\n\n  updateSections();\n};\n\nconst moveHorithontaly = direction => {\n  for (let r = 0; r < ROWS; r++) {\n    let row = board[r];\n\n    switch (direction) {\n      case 'left':\n        row = move(row);\n        board[r] = row;\n\n        break;\n\n      case 'right':\n        row.reverse();\n        row = move(row);\n        board[r] = row.reverse();\n\n        break;\n    }\n  }\n\n  updateSections();\n};\n\n// Prints field and numbers\nconst createBoard = () => {\n  for (let row = 0; row < ROWS; row++) {\n    for (let col = 0; col < COLUMNS; col++) {\n      const section = document.createElement('div');\n\n      section.classList.add(mainSectionClass);\n      section.id = `${row}-${col}`;\n\n      gameField.append(section);\n    }\n  }\n};\n\nconst updateSections = () => {\n  const sections\n    = gameField.querySelectorAll(`[class*=\"${mainSectionClass}--\"]`);\n\n  sections.forEach(section => {\n    section.classList.forEach(className => {\n      if (className.startsWith(`${mainSectionClass}--`)) {\n        section.classList.remove(className);\n        section.innerText = '';\n      }\n    });\n  });\n\n  for (let row = 0; row < ROWS; row++) {\n    for (let col = 0; col < COLUMNS; col++) {\n      const cell = document.getElementById(`${row}-${col}`);\n\n      if (board[row][col] !== 0) {\n        cell.classList.add(`${mainSectionClass}--${board[row][col]}`);\n        cell.innerText = board[row][col];\n      }\n    }\n  }\n};\n\nconst addNumber = table => {\n  let amountNumbers = isEmptyField(table) ? 2 : 1;\n\n  while (amountNumbers > 0) {\n    const column = Math.floor(Math.random() * COLUMNS);\n    const row = Math.floor(Math.random() * ROWS);\n\n    if (table[row][column] === 0) {\n      const num = Math.random() > 0.1 ? 2 : 4;\n\n      table[row][column] = num;\n\n      const section = document.getElementById(`${row}-${column}`);\n\n      section.classList.add(`${mainSectionClass}--${num}`);\n      section.innerText = num;\n\n      amountNumbers--;\n    }\n  }\n};\n\n// Events\nbutton.addEventListener('click', () => {\n  if (button.classList.contains('button--start')) {\n    createBoard();\n\n    button.classList.remove('button--start');\n    button.classList.add('button--restart');\n    button.innerText = 'Restart';\n\n    startMessage.classList.add('message--hidden');\n\n    addNumber(board);\n  } else {\n    board = Array.from({ length: ROWS }, () => Array(COLUMNS).fill(0));\n\n    while (gameField.firstChild) {\n      gameField.removeChild(gameField.firstChild);\n    }\n\n    looseMessage.classList.add('message--hidden');\n    winnerMessage.classList.add('message--hidden');\n\n    score.innerText = 0;\n\n    winGame = false;\n    gameOver = false;\n\n    createBoard();\n    addNumber(board);\n  }\n});\n\ndocument.addEventListener('keydown', e => {\n  if (gameOver || winGame) {\n    return;\n  }\n\n  e.preventDefault();\n\n  switch (e.key) {\n    case 'ArrowLeft':\n      if (canMoveLeft()) {\n        moveHorithontaly('left');\n        addNumber(board);\n      }\n\n      break;\n\n    case 'ArrowRight':\n      if (canMoveRight()) {\n        moveHorithontaly('right');\n        addNumber(board);\n      }\n\n      break;\n\n    case 'ArrowUp':\n      if (canMoveUp()) {\n        moveVerticaly('up');\n        addNumber(board);\n      }\n\n      break;\n\n    case 'ArrowDown':\n      if (canMoveDown()) {\n        moveVerticaly('down');\n        addNumber(board);\n      }\n\n      break;\n  }\n\n  checkEndGame();\n  notifyWinner();\n});\n"]}